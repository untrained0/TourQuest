import { View, Text, TouchableOpacity, StyleSheet, Alert } from 'react-native';
import React, { useEffect, useRef, useState } from 'react';
import { Camera } from 'expo-camera';
import { Audio } from 'expo-av';
import { Ionicons } from '@expo/vector-icons';
import { MaterialCommunityIcons } from '@expo/vector-icons';
import { useNavigation } from '@react-navigation/native';

export default function Recorder() {
  const navigation = useNavigation();
  const cameraRef = useRef(null);

  const [recordedVideos, setRecordedVideos] = useState([]);


  const [type, setType] = useState(Camera.Constants.Type.back);
  const [values, setValues] = useState({
    hasPermission: [],
    isFlashLightOn: Camera.Constants.FlashMode.off,
    videoStatus: 0,
    isRecordingPaused: false,
  });

  const { hasPermission, isFlashLightOn, videoStatus, isRecordingPaused } = values;

  useEffect(() => {
    getPermissions();
  }, []);

  const getPermissions = async () => {
    const { status } = await Camera.requestCameraPermissionsAsync();
    const AudioStatus = await Audio.requestPermissionsAsync();
    setValues({ ...values, hasPermission: [status, AudioStatus.status] });
  };

  if (hasPermission === null) {
    return <View />;
  }

  if (!hasPermission) {
    Alert.alert(
      'Camera Permission Required',
      'Please grant camera permission to use this feature.',
      [{ text: 'OK' }]
    );
    return null;
  }

  const toggleCameraType = () => {
    setType((current) =>
      current === Camera.Constants.Type.back
        ? Camera.Constants.Type.front
        : Camera.Constants.Type.back
    );
  };

  const videoRecord = async () => {
    if (!videoStatus && cameraRef.current) {
      try {
        setValues({
          ...values,
          videoStatus: 1,
          isFlashLightOn: isFlashLightOn ? Camera.Constants.FlashMode.torch : isFlashLightOn,
        });
  
        const data = await cameraRef.current.recordAsync();
        // Check if data.uri is a valid URI
        if (data.uri) {
          navigation.navigate('AddPost', { video: data.uri });
        } else {
          console.error("Invalid video data:", data);
          Alert.alert(
            'Recording Error',
            'An error occurred while recording. Please try again.',
            [{ text: 'OK' }]
          );
        }
      } catch (error) {
        console.error("Error recording video:", error);
        Alert.alert(
          'Recording Error',
          'An error occurred while recording. Please try again.',
          [{ text: 'OK' }]
        );
      }
    } else {
      try {
        if (isRecordingPaused) {
          // Resume and stop recording immediately to capture the last segment
          await cameraRef.current.resumePreview();
          await cameraRef.current.stopRecording();
        } else {
          // Stop recording
          await cameraRef.current.stopRecording();
        }
  
        setValues({
          ...values,
          videoStatus: 0,
          isFlashLightOn: Camera.Constants.FlashMode.off,
          isRecordingPaused: false,
        });
  
        // Navigate with the array of recorded videos
        navigation.navigate('AddPost', { videos: recordedVideos });
      } catch (error) {
        console.log(error);
      }
    }
  };

  
  const toggleRecordingPause = async () => {
    if (videoStatus && cameraRef.current) {
      try {
        if (isRecordingPaused) {
          await cameraRef.current.resumePreview();
        } else {
          await cameraRef.current.pausePreview();
  
          // Log paused video URI after pausing
          console.log("Paused video URI:", cameraRef.current.currentVideoURI);
          setRecordedVideos((prevVideos) => [...prevVideos, cameraRef.current.currentVideoURI]);
        }
      } catch (error) {
        console.error("Error pausing video:", error);
      }
  
      setValues({
        ...values,
        isRecordingPaused: !isRecordingPaused,
      });
    }
  };
  
  

  return (
    <View style={styles.container}>
      <Camera ref={cameraRef} flashMode={isFlashLightOn} style={styles.camera} type={type}>
        <View style={styles.buttonContainer}>
          <TouchableOpacity
            style={styles.button}
            onPress={() => {
              if (!videoStatus) {
                setValues({
                  ...values,
                  isFlashLightOn: isFlashLightOn
                    ? Camera.Constants.FlashMode.off
                    : Camera.Constants.FlashMode.on,
                });
              }
            }}
          >
            <MaterialCommunityIcons
              name={isFlashLightOn ? 'flashlight' : 'flashlight-off'}
              size={24}
              color="black"
            />
          </TouchableOpacity>

          <TouchableOpacity style={styles.button} onPress={videoRecord}>
            <MaterialCommunityIcons
              name={videoStatus ? 'stop' : 'record'}
              size={24}
              color="black"
            />
          </TouchableOpacity>

          <TouchableOpacity style={styles.button} onPress={toggleCameraType}>
            <MaterialCommunityIcons name="camera-front" size={24} color="black" />
          </TouchableOpacity>

          {videoStatus==1 && (
  <TouchableOpacity style={styles.button} onPress={toggleRecordingPause}>
    <View>
      <MaterialCommunityIcons
        name={isRecordingPaused ? 'play' : 'pause'}
        size={24}
        color="black"
      />
    </View>
  </TouchableOpacity>
)}
          
        </View>
      </Camera>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    marginBottom: 60,
  },
  camera: {
    flex: 1,
  },
  buttonContainer: {
    position: 'absolute',
    bottom: 20,
    alignSelf: 'center',
    display: 'flex',
    flexDirection: 'row',
  },
  button: {
    backgroundColor: 'white',
    padding: 15,
    borderRadius: 10,
    marginRight: 10,
  },
});


import { View, Text, TouchableOpacity, StyleSheet, TextInput } from 'react-native';
import React, { useContext, useEffect, useRef, useState } from 'react';
import Colors from '../Utils/Colors';
import { useNavigation, useRoute } from '@react-navigation/native';
import { Video } from 'expo-av';
import { getStorage, ref, uploadBytesResumable, getDownloadURL } from "firebase/storage";
import { doc, getFirestore, setDoc } from "firebase/firestore";
import { app } from '../../firebaseConfig';
import { useUser } from '@clerk/clerk-expo';
import { generateRandomString } from '../Utils/GenerateRandomString';
import { UserDetailContext } from '../Contexts/UserDetailContext';

export default function AddPostScreen() {
  const { user } = useUser();
  const storage = getStorage(app);
  const db = getFirestore(app);
  const video = useRef(null);
  const captionInput = useRef(null); // Added ref for caption input
  const navigation = useNavigation();
  const params = useRoute().params;

  const { userDetail, setUserDetail } = useContext(UserDetailContext);


  // const [progress, setProgress] = useState(0);
  // const [fileDocId, setFileDocId] = useState();
  // const [videoUrl, setVideoUrl] = useState();
  const [caption, setCaption] = useState(''); // Added state for caption

  const onRecord = () => {
    navigation.navigate('Recorder');
  };

  const onAddPost = async () => {
    const metadata = {
      contentType: 'video/mp4',
    };

    const response = await fetch(params?.video);
    const blob = await response.blob();

    const storageRef = ref(storage, 'post-videos/' + Date.now() + '.mp4');
    const uploadTask = uploadBytesResumable(storageRef, blob, metadata);

    uploadTask.on('state_changed',
      (snapshot) => {
        const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;
        console.log('Upload is ' + progress + '% done');
        // setProgress(progress);
      },
      (error) => {
        console.error('Error uploading video:', error);
      },
      async () => {
        const downloadURL = await getDownloadURL(uploadTask.snapshot.ref);
        console.log('File available at:', downloadURL);
        // setVideoUrl(downloadURL);
        saveInfo(downloadURL);
      }
    );
  };

  const saveInfo = async (videoUrl) => {
    console.log("Data added in firebase database!");
    const docId = generateRandomString();
    await setDoc(doc(db, "addedPost", docId), {
      VideoUrl: videoUrl,
      caption: caption, // Save caption in the database
      userEmail: user?.primaryEmailAddress?.emailAddress,
      userName: user?.fullName,
      Likes: 0,
      Comments : [],
      PostId: docId,
      UserID: userDetail.id,
    });
    // setFileDocId(docId);
    navigation.navigate('Home');
  }

  return (
    <View style={styles.container}>
      {params?.video ? (
        <>
          <Video
  ref={video}
  style={{ width: '100%', flex: 1, marginBottom: '50%' }}
  source={{
    uri: params?.video || '',
  }}
  useNativeControls
  resizeMode="cover"
  isLooping
  onError={(error) => console.error('Error loading video:', error)}
/>
          <View style={styles.captionContainer}>
            <TextInput
              ref={captionInput}
              style={styles.captionInput}
              placeholder="Add a Caption..."
              onChangeText={(text) => setCaption(text)}
              multiline
            />
            <TouchableOpacity style={styles.addPostButton} onPress={onAddPost}>
              <Text style={{ color: Colors.WHITE, fontSize: 20, padding: 5 }}>Add Post</Text>
            </TouchableOpacity>
          </View>
        </>
      ) : (
        <TouchableOpacity style={styles.recordButton} onPress={onRecord}>
          <Text style={{ color: Colors.WHITE, fontSize: 20, padding: 5 }}>Record</Text>
        </TouchableOpacity>
      )}
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    marginBottom: 60,
  },
  recordButton: {
    backgroundColor: Colors.GREEN,
    padding: 12,
    borderRadius: 15,
    marginBottom: 10,
  },
  addPostButton: {
    backgroundColor: Colors.BLUE,
    padding: 12,
    borderRadius: 15,
  },
  captionContainer: {
    position: 'absolute',
    bottom: 0,
    width: '100%',
    backgroundColor: 'rgba(255, 255, 255, 0.8)',
    padding: 10,
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  captionInput: {
    flex: 1,
    height: 40,
    borderColor: 'gray',
    borderWidth: 1,
    borderRadius: 5,
    marginRight: 10,
    padding: 5,
  },
});